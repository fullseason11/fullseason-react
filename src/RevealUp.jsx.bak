// src/RevealUp.jsx
import { motion } from "framer-motion";

export default function RevealUp({ children, delay = 0 }) {
  return (
    <motion.div
      initial={{ opacity: 0, y: 40 }}         // 시작: 아래에서 + 투명
      whileInView={{ opacity: 1, y: 0 }}      // 끝: 제자리 + 보이기
      viewport={{ once: true, amount: 0.3 }}  // 한번만 실행, 30% 보일 때 트리거
      transition={{ duration: 0.7, delay }}   // 0.7초 고정
    >
      {children}
    </motion.div>
  );
}
// src/RevealUp.jsx
import React, { useEffect, useRef, useState } from "react";

/** 스크롤 진입 시 아래→위로 0.7초 슬라이드 + 페이드 */
export default function RevealUp({
  children,
  duration = 700,   // 애니메이션 시간(ms)
  delay = 0,        // 시작 지연(ms)
  distance = 24,    // 아래에서 얼마나 올라올지(px)
  once = true,      // 한 번만 재생할지
}) {
  const ref = useRef(null);
  const [shown, setShown] = useState(false);

  useEffect(() => {
    const el = ref.current;
    const io = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setShown(true);
          if (once) io.disconnect();
        } else if (!once) {
          setShown(false);
        }
      },
      { threshold: 0.12 }
    );
    if (el) io.observe(el);
    return () => io.disconnect();
  }, [once]);

  const style = {
    opacity: shown ? 1 : 0,
    transform: shown ? "translateY(0)" : `translateY(${distance}px)`,
    transition: `opacity ${duration}ms ease, transform ${duration}ms ease`,
    transitionDelay: `${delay}ms`,
    willChange: "opacity, transform",
  };

  return (
    <div ref={ref} style={style}>
      {children}
    </div>
  );
}

